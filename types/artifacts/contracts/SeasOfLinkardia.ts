/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SeasOfLinkardiaInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accounts"
      | "addUpgrade"
      | "attack"
      | "buyUpgrade"
      | "checkIn"
      | "claimGPM"
      | "createAccount"
      | "getClaimableGold"
      | "getRanking"
      | "getShipsAt"
      | "getTimeUntilNextGPM"
      | "getUpgradeCost"
      | "nextUpgradeId"
      | "owner"
      | "players"
      | "purchaseCounts"
      | "renounceOwnership"
      | "repairShip"
      | "rescueXTZ"
      | "transferOwnership"
      | "travel"
      | "upgrades"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountCreated"
      | "CheckIn"
      | "GPMClaimed"
      | "OwnershipTransferred"
      | "ShipAttacked"
      | "TravelStarted"
      | "UpgradeAdded"
      | "UpgradePurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addUpgrade",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "attack", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "buyUpgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "checkIn", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimGPM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableGold",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRanking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getShipsAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUntilNextGPM",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpgradeCost",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextUpgradeId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCounts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repairShip",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "rescueXTZ", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "travel",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrades",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUpgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyUpgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimGPM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableGold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRanking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getShipsAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUntilNextGPM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpgradeCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextUpgradeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repairShip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rescueXTZ", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "travel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrades", data: BytesLike): Result;
}

export namespace AccountCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    boatName: string,
    isPirate: boolean
  ];
  export type OutputTuple = [user: string, boatName: string, isPirate: boolean];
  export interface OutputObject {
    user: string;
    boatName: string;
    isPirate: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CheckInEvent {
  export type InputTuple = [
    user: AddressLike,
    streak: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [user: string, streak: bigint, reward: bigint];
  export interface OutputObject {
    user: string;
    streak: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GPMClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    timeElapsed: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, timeElapsed: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    timeElapsed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShipAttackedEvent {
  export type InputTuple = [
    attacker: AddressLike,
    defender: AddressLike,
    destroyed: boolean
  ];
  export type OutputTuple = [
    attacker: string,
    defender: string,
    destroyed: boolean
  ];
  export interface OutputObject {
    attacker: string;
    defender: string;
    destroyed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TravelStartedEvent {
  export type InputTuple = [
    user: AddressLike,
    toLocation: BigNumberish,
    arriveAt: BigNumberish,
    fast: boolean
  ];
  export type OutputTuple = [
    user: string,
    toLocation: bigint,
    arriveAt: bigint,
    fast: boolean
  ];
  export interface OutputObject {
    user: string;
    toLocation: bigint;
    arriveAt: bigint;
    fast: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradeAddedEvent {
  export type InputTuple = [id: BigNumberish, name: string];
  export type OutputTuple = [id: bigint, name: string];
  export interface OutputObject {
    id: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradePurchasedEvent {
  export type InputTuple = [user: AddressLike, id: BigNumberish];
  export type OutputTuple = [user: string, id: bigint];
  export interface OutputObject {
    user: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SeasOfLinkardia extends BaseContract {
  connect(runner?: ContractRunner | null): SeasOfLinkardia;
  waitForDeployment(): Promise<this>;

  interface: SeasOfLinkardiaInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accounts: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        boatName: string;
        isPirate: boolean;
        gold: bigint;
        diamonds: bigint;
        hp: bigint;
        maxHp: bigint;
        speed: bigint;
        attack: bigint;
        defense: bigint;
        crew: bigint;
        maxCrew: bigint;
        location: bigint;
        gpm: bigint;
        lastCheckIn: bigint;
        checkInStreak: bigint;
        lastWrecked: bigint;
        travelEnd: bigint;
        lastGPMClaim: bigint;
      }
    ],
    "view"
  >;

  addUpgrade: TypedContractMethod<
    [
      name: string,
      cost: BigNumberish,
      gpmBonus: BigNumberish,
      maxHpBonus: BigNumberish,
      speedBonus: BigNumberish,
      attackBonus: BigNumberish,
      defenseBonus: BigNumberish,
      maxCrewBonus: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  attack: TypedContractMethod<[defender: AddressLike], [void], "nonpayable">;

  buyUpgrade: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  checkIn: TypedContractMethod<[], [void], "nonpayable">;

  claimGPM: TypedContractMethod<[], [void], "nonpayable">;

  createAccount: TypedContractMethod<
    [_boatName: string, _isPirate: boolean, _startLocation: BigNumberish],
    [void],
    "nonpayable"
  >;

  getClaimableGold: TypedContractMethod<
    [player: AddressLike],
    [bigint],
    "view"
  >;

  getRanking: TypedContractMethod<
    [n: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;

  getShipsAt: TypedContractMethod<
    [loc: BigNumberish],
    [[string[], string[], bigint[]]],
    "view"
  >;

  getTimeUntilNextGPM: TypedContractMethod<
    [player: AddressLike],
    [bigint],
    "view"
  >;

  getUpgradeCost: TypedContractMethod<
    [id: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  nextUpgradeId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  players: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  purchaseCounts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repairShip: TypedContractMethod<
    [atPort: boolean, useDiamond: boolean],
    [void],
    "payable"
  >;

  rescueXTZ: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  travel: TypedContractMethod<
    [toLocation: BigNumberish, fast: boolean],
    [void],
    "payable"
  >;

  upgrades: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        name: string;
        cost: bigint;
        gpmBonus: bigint;
        maxHpBonus: bigint;
        speedBonus: bigint;
        attackBonus: bigint;
        defenseBonus: bigint;
        maxCrewBonus: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accounts"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        boatName: string;
        isPirate: boolean;
        gold: bigint;
        diamonds: bigint;
        hp: bigint;
        maxHp: bigint;
        speed: bigint;
        attack: bigint;
        defense: bigint;
        crew: bigint;
        maxCrew: bigint;
        location: bigint;
        gpm: bigint;
        lastCheckIn: bigint;
        checkInStreak: bigint;
        lastWrecked: bigint;
        travelEnd: bigint;
        lastGPMClaim: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addUpgrade"
  ): TypedContractMethod<
    [
      name: string,
      cost: BigNumberish,
      gpmBonus: BigNumberish,
      maxHpBonus: BigNumberish,
      speedBonus: BigNumberish,
      attackBonus: BigNumberish,
      defenseBonus: BigNumberish,
      maxCrewBonus: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attack"
  ): TypedContractMethod<[defender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyUpgrade"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkIn"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimGPM"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createAccount"
  ): TypedContractMethod<
    [_boatName: string, _isPirate: boolean, _startLocation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getClaimableGold"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRanking"
  ): TypedContractMethod<[n: BigNumberish], [[string[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "getShipsAt"
  ): TypedContractMethod<
    [loc: BigNumberish],
    [[string[], string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeUntilNextGPM"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUpgradeCost"
  ): TypedContractMethod<
    [id: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextUpgradeId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseCounts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repairShip"
  ): TypedContractMethod<
    [atPort: boolean, useDiamond: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "rescueXTZ"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "travel"
  ): TypedContractMethod<
    [toLocation: BigNumberish, fast: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "upgrades"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        name: string;
        cost: bigint;
        gpmBonus: bigint;
        maxHpBonus: bigint;
        speedBonus: bigint;
        attackBonus: bigint;
        defenseBonus: bigint;
        maxCrewBonus: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AccountCreated"
  ): TypedContractEvent<
    AccountCreatedEvent.InputTuple,
    AccountCreatedEvent.OutputTuple,
    AccountCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CheckIn"
  ): TypedContractEvent<
    CheckInEvent.InputTuple,
    CheckInEvent.OutputTuple,
    CheckInEvent.OutputObject
  >;
  getEvent(
    key: "GPMClaimed"
  ): TypedContractEvent<
    GPMClaimedEvent.InputTuple,
    GPMClaimedEvent.OutputTuple,
    GPMClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ShipAttacked"
  ): TypedContractEvent<
    ShipAttackedEvent.InputTuple,
    ShipAttackedEvent.OutputTuple,
    ShipAttackedEvent.OutputObject
  >;
  getEvent(
    key: "TravelStarted"
  ): TypedContractEvent<
    TravelStartedEvent.InputTuple,
    TravelStartedEvent.OutputTuple,
    TravelStartedEvent.OutputObject
  >;
  getEvent(
    key: "UpgradeAdded"
  ): TypedContractEvent<
    UpgradeAddedEvent.InputTuple,
    UpgradeAddedEvent.OutputTuple,
    UpgradeAddedEvent.OutputObject
  >;
  getEvent(
    key: "UpgradePurchased"
  ): TypedContractEvent<
    UpgradePurchasedEvent.InputTuple,
    UpgradePurchasedEvent.OutputTuple,
    UpgradePurchasedEvent.OutputObject
  >;

  filters: {
    "AccountCreated(address,string,bool)": TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;
    AccountCreated: TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;

    "CheckIn(address,uint256,uint256)": TypedContractEvent<
      CheckInEvent.InputTuple,
      CheckInEvent.OutputTuple,
      CheckInEvent.OutputObject
    >;
    CheckIn: TypedContractEvent<
      CheckInEvent.InputTuple,
      CheckInEvent.OutputTuple,
      CheckInEvent.OutputObject
    >;

    "GPMClaimed(address,uint256,uint256)": TypedContractEvent<
      GPMClaimedEvent.InputTuple,
      GPMClaimedEvent.OutputTuple,
      GPMClaimedEvent.OutputObject
    >;
    GPMClaimed: TypedContractEvent<
      GPMClaimedEvent.InputTuple,
      GPMClaimedEvent.OutputTuple,
      GPMClaimedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ShipAttacked(address,address,bool)": TypedContractEvent<
      ShipAttackedEvent.InputTuple,
      ShipAttackedEvent.OutputTuple,
      ShipAttackedEvent.OutputObject
    >;
    ShipAttacked: TypedContractEvent<
      ShipAttackedEvent.InputTuple,
      ShipAttackedEvent.OutputTuple,
      ShipAttackedEvent.OutputObject
    >;

    "TravelStarted(address,uint256,uint256,bool)": TypedContractEvent<
      TravelStartedEvent.InputTuple,
      TravelStartedEvent.OutputTuple,
      TravelStartedEvent.OutputObject
    >;
    TravelStarted: TypedContractEvent<
      TravelStartedEvent.InputTuple,
      TravelStartedEvent.OutputTuple,
      TravelStartedEvent.OutputObject
    >;

    "UpgradeAdded(uint256,string)": TypedContractEvent<
      UpgradeAddedEvent.InputTuple,
      UpgradeAddedEvent.OutputTuple,
      UpgradeAddedEvent.OutputObject
    >;
    UpgradeAdded: TypedContractEvent<
      UpgradeAddedEvent.InputTuple,
      UpgradeAddedEvent.OutputTuple,
      UpgradeAddedEvent.OutputObject
    >;

    "UpgradePurchased(address,uint256)": TypedContractEvent<
      UpgradePurchasedEvent.InputTuple,
      UpgradePurchasedEvent.OutputTuple,
      UpgradePurchasedEvent.OutputObject
    >;
    UpgradePurchased: TypedContractEvent<
      UpgradePurchasedEvent.InputTuple,
      UpgradePurchasedEvent.OutputTuple,
      UpgradePurchasedEvent.OutputObject
    >;
  };
}
