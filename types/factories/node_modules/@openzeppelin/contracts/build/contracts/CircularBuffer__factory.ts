/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../common";
import type {
  CircularBuffer,
  CircularBufferInterface,
} from "../../../../../../node_modules/@openzeppelin/contracts/build/contracts/CircularBuffer";

const _abi = [
  {
    inputs: [],
    name: "InvalidBufferSize",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122053a4b4df012bcf4fa00c955c55306313a333aea0223739a99dd57ff5e3d42e4664736f6c63430008180033";

type CircularBufferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CircularBufferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CircularBuffer__factory extends ContractFactory {
  constructor(...args: CircularBufferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CircularBuffer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CircularBuffer__factory {
    return super.connect(runner) as CircularBuffer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CircularBufferInterface {
    return new Interface(_abi) as CircularBufferInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CircularBuffer {
    return new Contract(address, _abi, runner) as unknown as CircularBuffer;
  }
}
